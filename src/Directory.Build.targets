<Project ToolsVersion="15.0">

  <ItemGroup>
  </ItemGroup>
  
  <Import Project="nuget_override.props" Condition="Exists('nuget_override.props')" />

  <Target Name="_UnoOverrideNuget"
		AfterTargets="AfterBuild"
		DependsOnTargets="BuiltProjectOutputGroup"
		Condition="'$(NugetOverrideVersion)'!=''">

    <PropertyGroup>
      <_OverrideTargetFramework>$(TargetFramework)</_OverrideTargetFramework>
      <_TargetNugetFolder>$(USERPROFILE)\.nuget\packages\$(AssemblyName)\$(NugetOverrideVersion)\lib\$(_OverrideTargetFramework)</_TargetNugetFolder>
      <_TargetNugetRefFolder>$(USERPROFILE)\.nuget\packages\$(AssemblyName)\$(NugetOverrideVersion)\ref\$(_OverrideTargetFramework)</_TargetNugetRefFolder>
    </PropertyGroup>
    <ItemGroup>
      <_OutputFiles Include="$(TargetDir)\*.*" />
      <_OutputRefFiles Include="$(TargetDir)\ref\*.*" />
    </ItemGroup>
		
    <MakeDir Directories="$(_TargetNugetFolder)" />

    <Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder) and $(_TargetNugetRefFolder)" />

    <Copy SourceFiles="@(_OutputFiles)"
		  DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(_OutputRefFiles)"
		  DestinationFiles="@(_OutputRefFiles->'$(_TargetNugetRefFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>


	<!-- Workaround for missing UAP assets when building from the CLI -->
	<Target Name="IncludeUAPAssets"
		  BeforeTargets="_IntermediatePack"
		  Condition="'$(TargetFramework)'=='' and '$(TargetFrameworks)'!='' and $(TargetFrameworks.Contains('uap10.'))">
		
		<PropertyGroup>
			<_PackableTargetFramework>uap10.0.18362</_PackableTargetFramework>
		</PropertyGroup>

		<Message Text="Packing $(OutputPath)\$(_PackableTargetFramework)\$(AssemblyName) -> lib\$(_PackableTargetFramework)\$(AssemblyName)" />
		<ItemGroup>
			<Content Include="$(OutputPath)\$(_PackableTargetFramework)\$(AssemblyName)\**\*.xaml"
							 Pack="true"
							 PackagePath="lib\$(_PackableTargetFramework)\$(AssemblyName)\%(RecursiveDir)%(FileName)%(Extension)" />
		</ItemGroup>
	</Target>

	<!-- Workaround for missing WinUI assets when building from the CLI -->
	<Target Name="IncludeWinUIAssets"
		  BeforeTargets="_IntermediatePack"
		  Condition="'$(TargetFramework)'=='' and '$(TargetFrameworks)'!='' and $(TargetFrameworks.Contains('net5.0-windows10.0.18362.0'))">
		<PropertyGroup>
			<_PackableTargetFramework>net5.0-windows10.0.18362.0</_PackableTargetFramework>
			<_PackableTargetFrameworkTarget>net5.0-windows10.0.18362</_PackableTargetFrameworkTarget>
		</PropertyGroup>
		
		<Message Text="Packing $(OutputPath)\$(_PackableTargetFramework)\$(AssemblyName) -> lib\$(_PackableTargetFramework)" />
		<ItemGroup>
			<Content Include="$(OutputPath)\$(_PackableTargetFramework)\**\*.xaml"
							 Pack="true"
							 PackagePath="lib\$(_PackableTargetFrameworkTarget)\%(RecursiveDir)%(FileName)%(Extension)" />
		</ItemGroup>
	</Target>


</Project>
